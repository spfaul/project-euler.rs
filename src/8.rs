use std::cmp::max;

fn main()
{
	let big_num_string: &str = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";

	let mut front: i32 = 0;
	let mut end: i32 = 12;

	let mut max_val: u64 = 0;

	// println!("{}", &big_num_string[997..1000]);
	
	while end < big_num_string.len() as i32
	{
		let substr: &str = &big_num_string[front as usize..(end+1) as usize];
		let int_repr: u64 = substr.parse::<u64>().unwrap();

		max_val = max(max_val, int_to_digits(int_repr).iter().product());
		front += 1;
		end += 1;
	}

	println!("{}", max_val);

}

fn int_to_digits(mut n: u64) -> Vec<u64>
{
	let mut digits: Vec<u64> = Vec::new();
	let length = n.to_string().len();

	for _ in 0..length
	{
		digits.push(n % 10);
		n /= 10;
	}

	digits
}